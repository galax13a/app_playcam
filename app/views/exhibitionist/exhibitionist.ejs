<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title> PlaycamHub- Exhibitionist Chaturbate</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="/modules/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/modules/boxicons/css/boxicons.min.css">
    <link rel="stylesheet" href="/css/exhibitionist.css">
    
    <script defer src="/modules/htmx.org/dist/htmx.min.js"></script>
    <link rel="icon" href="/images/logo2.png" type="image/png">
    <script defer src="/js/lib/vue2.js"></script>
</head>

<body>
    <div class="container mt-2">
        <div class="container text-center text-white mb-3">
            <h1> PlayCam<span class="logis">Hub</span> - Chaturbate Exhibitionist Cams</h1>
        </div>        
        <!-- #app -->
        <div id="app">
            <div class="row">
                <div class="col-6" id="cams-exhibitionist">
                    <ul class="list-group list-group-flush w-100">           
                        <li v-for="(exhibitionist, index) in filteredExhibitionists" :key="index" class="list-group-item exhibitionist-item shadow rounded-3 bg-opacity-25 bg-dark">
                        
                            <div class="exhibitionist-details">
                                <img :src="exhibitionist.image_url" class="exhibitionist-img"
                                    alt="Exhibitionist Image">
                                <div class="exhibitionist-info mx-4 text-start">
                                    <h4 class="card-title nameTag" :name="exhibitionist.username">
                                        <i class='bx bxs-webcam fs-5'></i>
                                        {{ exhibitionist.username }}
                                        <i v-if="exhibitionist.gender === 'f'" class='bx bx-female'></i>
                                        <i v-else-if="exhibitionist.gender === 'm'" class='bx bx-male'></i>
                                        <i v-else-if="exhibitionist.gender === 't'" class='bx bx-male-sign'></i>
                                        <i v-else-if="exhibitionist.gender === 'c'" class='bx bx-male-female'></i>
                                    </h4>
                                    <p class="card-text">Location: {{ exhibitionist.location }}</p>
                                    <p class="card-text text-start">
                                        <i class='bx bxs-bullseye'></i>
                                        Views: {{ exhibitionist.num_users }}
                                        |
                                        <i class='bx bxs-objects-horizontal-left'></i>
                                        Followers: {{ exhibitionist.num_followers }}
                                        <br>
                                        <p>
                                            <span v-if="exhibitionist.age">Age: {{ exhibitionist.age }}</span>
                                            <span v-else>Age: No age</span>
                                            |
                                            <i :title="'Online Time: ' + exhibitionist.seconds_online" class='bx bxs-objects-vertical-bottom'></i>:
                                            {{ calculateTime(exhibitionist.seconds_online) }}
                                        </p>                   
                                        <a :href="exhibitionist.chat_room_url"
                                            class="btn btn-dark text-white bg-black bg-opacity-50 d-none">
                                            Visit Room
                                        </a>
                                        <div class="progress d-none">
                                            <div class="progress-bar" role="progressbar" style="width: 100%"
                                                aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                    </p>
                                </div>
                            </div>
                        </li>
                    </ul>
                </div>
    
                <div class="col-6">
                    <div class="container p-3 m-2 shadow rounded-3 bg-black bg-opacity-50 text-warning ">
                        
                        <form @submit.prevent="submitForm">
                            <div class="mb-3">
                                <label class="form-label">Filter by</label>
                                <select class="form-select" v-model="filterBy" required>
                                    <option disabled value="">Please select one</option>
                                    <option value="num_users">Number of Views</option>
                                    <option value="num_followers">Number of Followers</option>
                                    <option value="seconds_online">By Seconds Online</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Sort Order</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" v-model="sortOrder" value="asc" checked>
                                    <label class="form-check-label">Ascending</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" v-model="sortOrder" value="desc">
                                    <label class="form-check-label">Descending</label>
                                </div>
                            </div>
                            <button type="submit" class="btn btn-dark shadow">Filter</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
       
    </div>

    <script src="/modules/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            new Vue({
                el: '#app',
                data: {
                    exhibitionists: [],
                    filterBy: 'num_users', // Inicializa el filtro predeterminado
                    filteredExhibitionists: [], // Almacena la lista de exhibicionistas filtrados
                    sortOrder: 'desc' // Inicializa el orden predeterminado
                },
                mounted() {
                    this.loadExhibitionists(); // Cargar los datos al montar el componente
                },
                methods: {
                    async loadExhibitionists() {
                        // Lógica para cargar los datos de la API
                        const limit = 6;
                        let url = `https://chaturbate.com/api/public/affiliates/onlinerooms/?wm=gQ4iQ&client_ip=request_ip&exhibitionist=true&limit=${limit}`;
                        const response = await fetch(url);
                        const data = await response.json();
                        this.exhibitionists = data.results; // Actualizar los datos con la respuesta de la API
                        this.filteredExhibitionists = this.exhibitionists.slice(); // Inicializar la lista filtrada
                        this.filteredExhibitionists.sort((b, a) => a.num_users - b.num_users);
                        
                    },
                    async submitForm() {
                    
                        this.applyFilters();
                    },
                    applyFilters() {                        
                        switch (this.filterBy) {                            
                            case 'num_users':
                                this.filteredExhibitionists.sort((a, b) => (this.sortOrder === 'asc' ? a.num_users - b.num_users : b.num_users - a.num_users));
                                break;
                            case 'num_followers':
                                this.filteredExhibitionists.sort((a, b) => (this.sortOrder === 'asc' ? a.num_followers - b.num_followers : b.num_followers - a.num_followers));
                                break;
                            case 'seconds_online':
                                this.filteredExhibitionists.sort((a, b) => (this.sortOrder === 'asc' ? a.seconds_online - b.seconds_online : b.seconds_online - a.seconds_online));
                                break;
                            default:
                                break;
                        }
                    },                    
                    calculateTime(seconds) {
                        // Lógica para calcular el tiempo en línea
                        const hours = Math.floor(seconds / 3600);
                        const minutes = Math.floor((seconds % 3600) / 60);
                        const remainingSeconds = seconds % 60;
                        return `${hours} Hrs, ${minutes} Min, ${remainingSeconds} seconds`;
                    }
                }
            });
        });
    </script>
</body>
</html>
